<?php
// $Id: chargify.module,v 1.4 2010/03/09 17:30:33 q0rban Exp $

/**
 * @file
 *   Chargify module
 *
 *   Build by Sprocket.
 *   http://sprocketcreative.com
 */

define('CHARGIFY_TRIALING', 'trialing');
define('CHARGIFY_ACTIVE', 'active');
define('CHARGIFY_SOFT_FAILURE', 'soft_failure');
define('CHARGIFY_PAST_DUE', 'past_due');
define('CHARGIFY_SUSPENDED', 'suspended');
define('CHARGIFY_CLOSED', 'closed');
define('CHARGIFY_EXPIRED', 'expired');

/**
 * Implementation of hook_theme().
 */
function chargify_theme() {
  $items = array();

  $items['chargify_subscription_state'] = array(
    'arguments' => array('state' => ''),
    'file' => 'chargify.theme.inc',
  );
  $items['chargify_product_price'] = array(
    'arguments' => array('product' => NULL),
    'file' => 'chargify.theme.inc',
  );

  return $items;
}

/**
 * Implementation of hook_user().
 */
function chargify_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      if ($customer_id = chargify_uid_to_customer_id($account->uid)) {
        $account->customer_id = $customer_id;
      }
      if ($subs = chargify_get_subscription_records($account)) {
        $account->subscriptions = $subs;
      }
      break;
    case 'insert':
    case 'update':
      if (isset($edit['customer_id']) || isset($edit['subscriptions'])) {
        chargify_user_save($account, $edit);
      }
      break;
    case 'delete':
      if (isset($account->customer_id)) {
        chargify_user_delete($account);
      }
      break;
  }
}

/**
 * Implementation of hook_views_api().
 */
function chargify_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implementation of hook_chargify_api_postback().
 */
function chargify_chargify_api_postback($customers) {
  chargify_customer_update_batch($customers);
}

/**
 * Starts a batch operation to update an array of customers.
 *
 * @param $customers
 *   An array of Chargify customer IDs to update.
 */
function chargify_customer_update_batch($customers) {
  $ops = array();

  foreach ($customers as $customer_id) {
    $ops[] = array('chargify_customer_update_batch_op', array($customer_id));
  }

  $batch = array(
    'operations' => $ops,
    'finished' => 'chargify_customer_update_batch_finished',
    'file' => drupal_get_path('module', 'chargify') .'/chargify.batch.inc',
  );

  batch_set($batch);
  batch_process(); 
}

/**
 * Helper to return a state passed through t().
 */
function chargify_subscription_state($state) {
  static $states = array();

  if (empty($states)) {
    $states = array(
      CHARGIFY_TRIALING => t('Trialing'),
      CHARGIFY_ACTIVE => t('Active'),
      CHARGIFY_SOFT_FAILURE => t('Soft Failure'),
      CHARGIFY_PAST_DUE => t('Past Due'),
      CHARGIFY_SUSPENDED => t('Suspended'),
      CHARGIFY_CLOSED => t('Closed'),
      CHARGIFY_EXPIRED => t('Expired'),
    );
  }

  return $states[$state];
}

/**
 * Load up all Chargify subscriptions for a user.
 *
 * @param $account
 *   The Drupal user object to retrieve the subscriptions for.
 * @return
 *   An array of subscription objects
 */
function chargify_get_subscriptions($account) {
  $subscriptions = array();

  foreach (chargify_api_customer_get_subscriptions($account->customer_id) as $subscription) {
    $subscriptions[$subscription->id] = $subscription;
  }

  return $subscriptions;
}

/**
 * Load up all database subscription records for a user.
 *
 * @param $account
 *   The Drupal user object to retrieve the subscription records for.
 * @return
 *   An array of subscription records from the db, keyed by the Chargify 
 *   subscription id.
 */
function chargify_get_subscription_records($account) {
  $records = array();
  $result = db_query("SELECT * FROM {chargify_subscriptions} WHERE uid = %d", $account->uid);

  while ($record = db_fetch_object($result)) {
    $records[$record->subscription_id] = $record;
  }

  return $records;
}

/**
 * Save chargify records for a user.
 *
 * @param $account
 *   The Drupal user object to save.
 * @param $edit
 *   An array of new stuff to save.
 */
function chargify_user_save(&$account, &$edit) {
  // Check to see if we're updating.
  if (isset($edit['customer_id'])) {
    if (isset($account->customer_id)) {
      drupal_write_record('chargify_customers', $account, array('customer_id'));
    }
    // Otherwise, write a new row.
    else {
      $account->customer_id = $edit['customer_id'];
      drupal_write_record('chargify_customers', $account);
    }
    unset($edit['customer_id']);
  }

  if (isset($edit['subscriptions'])) {
    $subscriptions = array();

    foreach ($edit['subscriptions'] as $key => $subscription) {
      if ($subscription instanceof chargify_subscription) {
        $subscriptions[$key] = chargify_subscription_save_record($subscription, $account->uid);
      }
    }

    unset($edit['subscriptions']);
    $account->subscriptions = isset($account->subscriptions) ? $account->subscriptions : array();
    $account->subscriptions += $subscriptions;
  }
}

/**
 * Inserts or updates a subscription record.
 *
 * @param $subscription
 *   An instance of the chargify_subscription class.
 * @param $uid
 *   Optional user id for this subscription. Include this to avoid an extra db query.
 * @return
 *   The database record.
 */
function chargify_subscription_save_record($subscription, $uid = NULL) {
  $record = new stdClass();
  $product = $subscription->getProduct();
  $customer = $subscription->getCustomer();
  drupal_set_message(print_r($product, 1));
  drupal_set_message(print_r($customer, 1));

  $uid = is_null($uid) ? chargify_customer_id_to_uid($customer->getID()) : $uid;

  $record->subscription_id = $subscription->getId();
  $record->product_handle  = $product->getHandle();
  $record->uid             = $uid;
  $record->state           = $subscription->getState();

  // Check to see if we're updating.
  if (db_result(db_query("SELECT COUNT(*) FROM {chargify_subscriptions} WHERE subscription_id = %d", $record->subscription_id)) > 0) {
    drupal_write_record('chargify_subscriptions', $record, array('subscription_id'));
  }
  // Otherwise, write a new row.
  else {
    drupal_write_record('chargify_subscriptions', $record);
  }

  return $record;
}

/**
 * Deletes a subscription record.
 *
 * @param $subscription_id
 *   The id of the subscription to delete
 */
function chargify_subscription_delete_record($subscription_id) {
  db_query("DELETE FROM {chargify_subscriptions} WHERE subscription_id = %d", $subscription_id);
}

/**
 * Loads the Chargify customer id from a Drupal user ID.
 */
function chargify_uid_to_customer_id($uid) {
  return db_result(db_query("SELECT customer_id FROM {chargify_customers} WHERE uid = %d", $uid));
}

/**
 * Loads the Drupal user ID from a Chargify customer id.
 */
function chargify_customer_id_to_uid($id) {
  return db_result(db_query("SELECT uid FROM {chargify_customers} WHERE customer_id = %d", $id));
}

/**
 * A Drupal user is being deleted.
 */
function chargify_user_delete($account) {
  db_query("DELETE FROM {chargify_customers} WHERE uid = %d", $account->uid);
  db_query("DELETE FROM {chargify_subscriptions} WHERE uid = %d", $account->uid);
}